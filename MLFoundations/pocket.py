import sysimport numpy as npimport randomdef Readfile(filename):    '''    读取文件，前几列是数据，最后一列是标记：1、-1    :param filename:文件名    :return:data 得到的相关的数组数据    '''    data = []    with open(filename, 'r') as f:        for line in f:            line = line.strip()            items = line.split()            for i in range(len(items)):         #转换成数值类型                items[i] = float(items[i])            items.insert(0, 1.0)                #增加一个维度!!!            data.append(items[0:])                return datadef split_data(collect):    '''    读取文件，前几列是数据，最后一列是标记：1、-1    :param filename:文件名    :return:data：数据列表,sign：标记列表    '''    data = []    sign = []        for i in range(len(collect)):        data.append(collect[i][0:-1])        sign.append(collect[i][-1])                return data, signdef error_weight(data,sign,w):    error_num = 0    total = len(data)    for i in range(total):        if len(w) != len(data[i]):            sys.exit(-1)        score = np.dot(w,data[i])        tag = 1 if score > 0 else -1        if tag != sign[i]:            error_num += 1    ret = error_num/total    return retdef find_error(data,sign,w):    total = len(data)    rd = random.Random()    for i in range(total*10):        index = rd.randint(0,total-1)        if len(w) != len(data[index]):            sys.exit(-1)        score = np.dot(w, data[index])        tag = 1 if score > 0 else -1        if tag != sign[index]:            return True,index    else:        err_train = error_weight(data,sign,w)        if err_train != 0:            while True:                index = rd.randint(0, total - 1)                if len(w) != len(data[index]):                    sys.exit(-1)                score = np.dot(w, data[index])                tag = 1 if score > 0 else -1                if tag != sign[index]:                    return True, index        else:            index = total            return False,indexdef update_w(data,sign,error_index,w,k=1):    temp = np.dot(sign[error_index],data[error_index])    if (len(w) != len(temp)):        sys.exit(-1)    w = w + k*temp    return wdef PLA_pocket(data,sign,w=list([0,0,0,0,0]),steps=50,k=1):    w_best = w    err_min = error_weight(data,sign,w_best)    for i in range(steps):        exit_error,err_index = find_error(data,sign,w)                if exit_error:            w = update_w(data,sign,err_index,w,k)            err_train = error_weight(data,sign,w)            #贪心：根据比对的结果进行相应的优化            if err_train < err_min:                w_best = w                err_min = err_train        else:            w_best = w            err_min = 0            break    return w_best,err_minif __name__ ==  '__main__':    file_train = 'hw1_18_train.dat'    collect = Readfile(file_train)    data,sign = split_data(collect)    file_test = 'hw1_18_test.dat'    collect_test = Readfile(file_test)    data_test,sign_test = split_data(collect_test)    err_list=[]    for i in range(100):        w = [0,0,0,0,0]        w, err_percent = PLA_pocket(data,sign,w,100)        err_test = error_weight(data,sign,w)        err_list.append(err_test)        print(err_test,end=' ')        if((i+1)%20 == 0):            print()    total = 0    for i in err_list:        total = total+i    print('average of test error:%.3f' %(total/100))# average of test error:0.124