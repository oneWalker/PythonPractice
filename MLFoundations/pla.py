#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Fri Jan 15 18:05:21 2021@author: Kun"""import numpy as npimport sysimport randomdef Readfile(filename):    '''    读取文件，前几列是数据，最后一列是标记：1、-1    :param filename:文件名    :return:data 得到的相关的数组数据    '''    data = []    with open(filename, 'r') as f:        for line in f:            line = line.strip()            items = line.split()            for i in range(len(items)):         #转换成数值类型                items[i] = float(items[i])            items.insert(0, 1.0)                #增加一个维度!!!            data.append(items[0:])                return datadef split_data(collect):    '''    读取文件，前几列是数据，最后一列是标记：1、-1    :param filename:文件名    :return:data：数据列表,sign：标记列表    '''    data = []    sign = []        for i in range(len(collect)):        data.append(collect[i][0:-1])        sign.append(collect[i][-1])                return data, signdef find_mistake(data,sign,w,halt_last):    '''    循环找到错误数据，返回False和新的错误索引；若没有，返回True和原始索引    :param data:     :param sign:     :param w:     :param halt_last: 原始索引    :return: T/F,halt_last    '''    halt_last1 = halt_last    right_num = 0                               #number of 'right' data    total = len(sign)                           #total number of data    index = halt_last1    while right_num < total:                    # cycle,find 'mistake' data        if (len(w) != len(data[index])):        # gurantee the same length            sys.exit(-1)        score = np.dot(w, data[index])        if (score * sign[index] > 0) or (score == 0 and sign[index] < 0):            right_num += 1            index = index+1            if index == total:                index=0        else:            halt_last = index                   #index of 'mistake' data            return False,halt_last    else:        return True,halt_lastdef update_w(w,data,sign,halt_last,k=1):    '''    update w    :param w:     :param data:     :param sign:     :param halt_last:错误数据的索引    :param k:     :return: w    '''    temp = np.dot(sign[halt_last],data[halt_last])    if (len(w) != len(temp)):                   # gurantee the same length        sys.exit(-1)    w = w + k*temp    return wdef PLA(data,sign,w=[0,0,0,0,0],k=1):    '''    实现PLA算法。    :param data: 数据    :param sign: 标记    :param w: 初始权重    :param k: 调节w更改的大小    :return: w：权重, steps：更新次数, halt_last：最后一次‘出错’数据的索引    '''    halt_last = 0    steps = 0    while(True):        no_mist, halt_last= find_mistake(data,sign,w,halt_last)     #find next mistake        if not no_mist:            steps += 1            w = update_w(w,data,sign,halt_last,k)                   #update w        else:            return w, steps, halt_lastif __name__ == '__main__':    file_name = 'hw1_15_train.dat'    collect = Readfile(file_name)    # Question 15        data,sign = split_data(collect)    w = [0,0,0,0,0]    w,steps,halt_last = PLA(data,sign,w)    print("w:", w)    print('update:%s' %steps)    print('last_modification:\nline:%s' %(halt_last+1))    print('data:',data[halt_last][1:],sign[halt_last])# w: [-3.000 2.353 -1.614 2.831 3.853 ]# update:40# last_modification:# line:275 data:0.21139 0.30158 0.65269 0.051723 -1# Question 16    totalSteps = 0    for i in range(2000):        random.shuffle(collect)        data,sign = split_data(collect)        w = [0,0,0,0,0]        w,steps,halt_last = PLA(data,sign,w)         print("第"+str(i)+"次:"+str(steps))        totalSteps += steps            print("平均次数:",totalSteps/2000)# 平均次数: 39.9835#Question 17    data,sign = split_data(collect)    w = [0,0,0,0,0]    w,steps,halt_last = PLA(data,sign,w,0.5)    print("系数为0.5时的次数:",steps)        